/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class QuizClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44368";
    }

    healthCheck(): Promise<string> {
        let url_ = this.baseUrl + "/api/Quiz/HealthCheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHealthCheck(_response);
        });
    }

    protected processHealthCheck(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    getExistingQuiz(quizName: string): Promise<Quiz> {
        let url_ = this.baseUrl + "/api/Quiz/GetExistingQuiz";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quizName);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExistingQuiz(_response);
        });
    }

    protected processGetExistingQuiz(response: Response): Promise<Quiz> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Quiz.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Quiz>(<any>null);
    }

    createQuiz(viewModel: QuizViewModel): Promise<Quiz> {
        let url_ = this.baseUrl + "/api/Quiz/CreateQuiz";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateQuiz(_response);
        });
    }

    protected processCreateQuiz(response: Response): Promise<Quiz> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Quiz.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Quiz>(<any>null);
    }

    validateQuizGuid(guid: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Quiz/ValidateGuid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(guid);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidateQuizGuid(_response);
        });
    }

    protected processValidateQuizGuid(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Quiz/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    registerQuizTeam(teamName: string): Promise<QuizTeam> {
        let url_ = this.baseUrl + "/api/Quiz/RegisterTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(teamName);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterQuizTeam(_response);
        });
    }

    protected processRegisterQuizTeam(response: Response): Promise<QuizTeam> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuizTeam.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<QuizTeam>(<any>null);
    }

    getChuckNorrisFact(): Promise<string> {
        let url_ = this.baseUrl + "/api/Quiz/ChuckNorrisFact";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetChuckNorrisFact(_response);
        });
    }

    protected processGetChuckNorrisFact(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    inviteTeams(request: TeamInviteRequest): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Quiz/InviteTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInviteTeams(_response);
        });
    }

    protected processInviteTeams(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    nonsense(): Promise<InviteTeamViewModel> {
        let url_ = this.baseUrl + "/api/Quiz/Nonsense";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNonsense(_response);
        });
    }

    protected processNonsense(response: Response): Promise<InviteTeamViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InviteTeamViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InviteTeamViewModel>(<any>null);
    }
}

export class QuizHostClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44368";
    }

    getOrCreateQuizHost(hostName: string): Promise<QuizHost> {
        let url_ = this.baseUrl + "/api/QuizHost/GetOrCreateHost";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(hostName);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrCreateQuizHost(_response);
        });
    }

    protected processGetOrCreateQuizHost(response: Response): Promise<QuizHost> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuizHost.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<QuizHost>(<any>null);
    }

    delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/QuizHost/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuizHubClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44368";
    }

    test(): Promise<string> {
        let url_ = this.baseUrl + "/api/QuizHub/Test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTest(_response);
        });
    }

    protected processTest(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    setClientMessage(json: JsonElement): Promise<void> {
        let url_ = this.baseUrl + "/api/QuizHub/SetMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(json);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetClientMessage(_response);
        });
    }

    protected processSetClientMessage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    setQuizHubRoundName(name: string): Promise<void> {
        let url_ = this.baseUrl + "/api/QuizHub/SetRoundName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(name);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetQuizHubRoundName(_response);
        });
    }

    protected processSetQuizHubRoundName(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class RoundClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44368";
    }

    generateEmptyRound(quizId: string): Promise<RoundViewModel> {
        let url_ = this.baseUrl + "/api/Round/GenerateEmptyRound";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(quizId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateEmptyRound(_response);
        });
    }

    protected processGenerateEmptyRound(response: Response): Promise<RoundViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoundViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoundViewModel>(<any>null);
    }

    addRound(viewModel: RoundViewModel): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Round/AddRound";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddRound(_response);
        });
    }

    protected processAddRound(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class Quiz implements IQuiz {
    id!: string;
    name?: string | undefined;
    numberOfRounds!: number;
    rounds?: Round[] | undefined;
    teams?: QuizTeam[] | undefined;
    quizHostId!: number;
    quizHost?: QuizHost | undefined;

    constructor(data?: IQuiz) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.numberOfRounds = _data["numberOfRounds"];
            if (Array.isArray(_data["rounds"])) {
                this.rounds = [] as any;
                for (let item of _data["rounds"])
                    this.rounds!.push(Round.fromJS(item));
            }
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(QuizTeam.fromJS(item));
            }
            this.quizHostId = _data["quizHostId"];
            this.quizHost = _data["quizHost"] ? QuizHost.fromJS(_data["quizHost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Quiz {
        data = typeof data === 'object' ? data : {};
        let result = new Quiz();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["numberOfRounds"] = this.numberOfRounds;
        if (Array.isArray(this.rounds)) {
            data["rounds"] = [];
            for (let item of this.rounds)
                data["rounds"].push(item.toJSON());
        }
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        data["quizHostId"] = this.quizHostId;
        data["quizHost"] = this.quizHost ? this.quizHost.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IQuiz {
    id: string;
    name?: string | undefined;
    numberOfRounds: number;
    rounds?: Round[] | undefined;
    teams?: QuizTeam[] | undefined;
    quizHostId: number;
    quizHost?: QuizHost | undefined;
}

export class Round implements IRound {
    id!: number;
    category?: string | undefined;
    numberOfQuestions!: number;
    questions?: Question[] | undefined;
    quizId!: string;
    quiz?: Quiz | undefined;

    constructor(data?: IRound) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.category = _data["category"];
            this.numberOfQuestions = _data["numberOfQuestions"];
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(Question.fromJS(item));
            }
            this.quizId = _data["quizId"];
            this.quiz = _data["quiz"] ? Quiz.fromJS(_data["quiz"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Round {
        data = typeof data === 'object' ? data : {};
        let result = new Round();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["category"] = this.category;
        data["numberOfQuestions"] = this.numberOfQuestions;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        data["quizId"] = this.quizId;
        data["quiz"] = this.quiz ? this.quiz.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRound {
    id: number;
    category?: string | undefined;
    numberOfQuestions: number;
    questions?: Question[] | undefined;
    quizId: string;
    quiz?: Quiz | undefined;
}

export class Question implements IQuestion {
    id!: number;
    roundId!: number;
    questionNumber!: number;
    pointValue!: number;
    wording?: string | undefined;

    constructor(data?: IQuestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roundId = _data["roundId"];
            this.questionNumber = _data["questionNumber"];
            this.pointValue = _data["pointValue"];
            this.wording = _data["wording"];
        }
    }

    static fromJS(data: any): Question {
        data = typeof data === 'object' ? data : {};
        let result = new Question();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roundId"] = this.roundId;
        data["questionNumber"] = this.questionNumber;
        data["pointValue"] = this.pointValue;
        data["wording"] = this.wording;
        return data; 
    }
}

export interface IQuestion {
    id: number;
    roundId: number;
    questionNumber: number;
    pointValue: number;
    wording?: string | undefined;
}

export class QuizTeam implements IQuizTeam {
    id!: number;
    emailAddress?: string | undefined;
    teamName?: string | undefined;
    points!: number;

    constructor(data?: IQuizTeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.emailAddress = _data["emailAddress"];
            this.teamName = _data["teamName"];
            this.points = _data["points"];
        }
    }

    static fromJS(data: any): QuizTeam {
        data = typeof data === 'object' ? data : {};
        let result = new QuizTeam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emailAddress"] = this.emailAddress;
        data["teamName"] = this.teamName;
        data["points"] = this.points;
        return data; 
    }
}

export interface IQuizTeam {
    id: number;
    emailAddress?: string | undefined;
    teamName?: string | undefined;
    points: number;
}

export class QuizHost implements IQuizHost {
    id!: number;
    userName?: string | undefined;
    existingQuizzes?: Quiz[] | undefined;

    constructor(data?: IQuizHost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            if (Array.isArray(_data["existingQuizzes"])) {
                this.existingQuizzes = [] as any;
                for (let item of _data["existingQuizzes"])
                    this.existingQuizzes!.push(Quiz.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuizHost {
        data = typeof data === 'object' ? data : {};
        let result = new QuizHost();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        if (Array.isArray(this.existingQuizzes)) {
            data["existingQuizzes"] = [];
            for (let item of this.existingQuizzes)
                data["existingQuizzes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQuizHost {
    id: number;
    userName?: string | undefined;
    existingQuizzes?: Quiz[] | undefined;
}

export class QuizViewModel implements IQuizViewModel {
    quizName?: string | undefined;
    quizHostName?: string | undefined;

    constructor(data?: IQuizViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quizName = _data["quizName"];
            this.quizHostName = _data["quizHostName"];
        }
    }

    static fromJS(data: any): QuizViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new QuizViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quizName"] = this.quizName;
        data["quizHostName"] = this.quizHostName;
        return data; 
    }
}

export interface IQuizViewModel {
    quizName?: string | undefined;
    quizHostName?: string | undefined;
}

export class TeamInviteRequest implements ITeamInviteRequest {
    quizId?: string | undefined;
    emailAddresses?: string[] | undefined;

    constructor(data?: ITeamInviteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quizId = _data["quizId"];
            if (Array.isArray(_data["emailAddresses"])) {
                this.emailAddresses = [] as any;
                for (let item of _data["emailAddresses"])
                    this.emailAddresses!.push(item);
            }
        }
    }

    static fromJS(data: any): TeamInviteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TeamInviteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quizId"] = this.quizId;
        if (Array.isArray(this.emailAddresses)) {
            data["emailAddresses"] = [];
            for (let item of this.emailAddresses)
                data["emailAddresses"].push(item);
        }
        return data; 
    }
}

export interface ITeamInviteRequest {
    quizId?: string | undefined;
    emailAddresses?: string[] | undefined;
}

export class InviteTeamViewModel implements IInviteTeamViewModel {
    email?: string | undefined;
    fieldName?: string | undefined;

    constructor(data?: IInviteTeamViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.fieldName = _data["fieldName"];
        }
    }

    static fromJS(data: any): InviteTeamViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InviteTeamViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["fieldName"] = this.fieldName;
        return data; 
    }
}

export interface IInviteTeamViewModel {
    email?: string | undefined;
    fieldName?: string | undefined;
}

export class JsonElement implements IJsonElement {
    valueKind!: JsonValueKind;

    constructor(data?: IJsonElement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valueKind = _data["valueKind"];
        }
    }

    static fromJS(data: any): JsonElement {
        data = typeof data === 'object' ? data : {};
        let result = new JsonElement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["valueKind"] = this.valueKind;
        return data; 
    }
}

export interface IJsonElement {
    valueKind: JsonValueKind;
}

export enum JsonValueKind {
    Undefined = 0,
    Object = 1,
    Array = 2,
    String = 3,
    Number = 4,
    True = 5,
    False = 6,
    Null = 7,
}

export class RoundViewModel implements IRoundViewModel {
    id!: number;
    subject?: string | undefined;
    questions?: QuestionViewModel[] | undefined;
    quizId?: number | undefined;

    constructor(data?: IRoundViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subject = _data["subject"];
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(QuestionViewModel.fromJS(item));
            }
            this.quizId = _data["quizId"];
        }
    }

    static fromJS(data: any): RoundViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoundViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subject"] = this.subject;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        data["quizId"] = this.quizId;
        return data; 
    }
}

export interface IRoundViewModel {
    id: number;
    subject?: string | undefined;
    questions?: QuestionViewModel[] | undefined;
    quizId?: number | undefined;
}

export class QuestionViewModel implements IQuestionViewModel {
    questionText?: string | undefined;
    pointValue!: number;
    questionNumber!: number;

    constructor(data?: IQuestionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.questionText = _data["questionText"];
            this.pointValue = _data["pointValue"];
            this.questionNumber = _data["questionNumber"];
        }
    }

    static fromJS(data: any): QuestionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionText"] = this.questionText;
        data["pointValue"] = this.pointValue;
        data["questionNumber"] = this.questionNumber;
        return data; 
    }
}

export interface IQuestionViewModel {
    questionText?: string | undefined;
    pointValue: number;
    questionNumber: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}